{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Magma is an open source 4G and 5G core network. Use it to operate your own private mobile  network. Magma enables better connectivity by:</p> <ul> <li>Allowing operators to offer cellular service without vendor lock-in with a modern, open source core network.</li> <li>Enabling operators to manage their networks more efficiently with more automation, less downtime, better predictability, and more agility to add new services and applications.</li> <li>Enabling federation between existing MNOs and new infrastructure providers for expanding rural infrastructure.</li> <li>Allowing operators who are constrained with licensed spectrum to add capacity and reach by using Wi-Fi and CBRS.</li> </ul> <p>To learn more about Magma, visit the official website.</p>"},{"location":"#charmed-magma","title":"Charmed Magma","text":"<p>Charmed Magma is a distribution of Magma published by Canonical built to work with  Juju. It is the easiest way to operate Magma. It provides the simplest setup, integration and  lifecycle management options.</p> <ul> <li>Works on all clouds: Charmed Magma is not opinionated about your choice of cloud. It can also  run on your personnal computer.</li> <li>Integrations: Charmed Magma offers seamless integration between each component and with  standard monitoring tools.</li> <li>Automation: Charmed Magma automates the initial setup and most operations.</li> </ul> <p>Get started here</p>"},{"location":"how-to/deploy_charmed_magma_access_gateway/","title":"Deploy Charmed Magma Access Gateway","text":""},{"location":"how-to/deploy_charmed_magma_access_gateway/#requirements","title":"Requirements","text":"<p>The Access Gateway must be installed on an Ubuntu machine with the following specifications:</p> <ul> <li> Operating System: Ubuntu 20.04 LTS with Linux Kernel 5.4</li> <li> Processor: x86-64 dual-core processor (around 2GHz clock speed or faster)</li> <li> Memory: 4GB RAM</li> <li> Storage: 32GB or greater SSD</li> <li> Networking: At least two ethernet interfaces using two different subnets (SGi for internet connectivity and S1 for enodeB connectivity)</li> </ul> <p>Danger</p> <p>Installing this charm will affect the target computer's networking configuration. Make sure it is installed on designated hardware (personal computers are strongly discouraged).</p> <p>Info</p> <p>Some clouds like AWS use newer kernel versions by default. If you want to downgrade your kernel, please refer to the following guide.</p> <p>Info</p> <p>For small networks (i.e. 10 eNBs, 10 active subscribers), Magma can produce around 1 GB of logs per week. Most of these logs will go to /var/log/journal. To avoid problems with insufficient disk space, it is recommended to configure log rotation for systemd-journald.  For more information please visit Ubuntu manuals.</p>"},{"location":"how-to/deploy_charmed_magma_access_gateway/#install-magma-access-gateway","title":"Install Magma Access Gateway","text":"Option 1: DHCP network configurationOption 2: Static network configuration <p>Deploy Magma Access Gateway: <pre><code>juju deploy magma-access-gateway-operator --config sgi=enp0s1 --config s1=enp0s2\n</code></pre></p> <p>Info</p> <p>The interface names will need to be adjusted based on your specific machine.</p> <p>Create a file called <code>agw_config.yaml</code> that contains the following content:</p> <pre><code>---\nmagma-access-gateway-operator:\nsgi: enp0s1\nsgi-ipv4-address: 192.168.0.2/24\nsgi-ipv4-gateway: 192.168.0.1\nsgi-ipv6-address: fd7d:3797:378b:a502::2/64\nsgi-ipv6-gateway: fd7d:3797:378b:a502::1\ns1: enp0s2\ns1-ipv4-address: 192.168.1.2/24\ns1-ipv6-address: fd7d:3797:378b:a503::2/64\ndns: '[\"8.8.8.8\", \"208.67.222.222\"]'\n</code></pre> <p>Info</p> <p>The interface names and IP addresses will need to be adjusted based on your specific machine.</p> <p>Deploy Magma Access Gateway:</p> <pre><code>juju deploy magma-access-gateway-operator --config agw_config.yaml\n</code></pre>"},{"location":"how-to/deploy_charmed_magma_orchestrator/","title":"Deploy Charmed Magma Orchestrator","text":""},{"location":"how-to/deploy_charmed_magma_orchestrator/#requirements","title":"Requirements","text":"<p>The Orchestrator must be installed on a Kubernetes cluster with the following specifications:</p> <ul> <li> Kubernetes: A cluster with a total of a minimum of 6 vCPUs and 16 GB of RAM.</li> <li> Juju 2.9: A Juju controller with access to the Kubernetes cluster</li> </ul> <p>Note</p> <p>If the Juju controller is running on your Kubernetes cluster, it should use a LoadBalancer service type</p>"},{"location":"how-to/deploy_charmed_magma_orchestrator/#deploy-the-magma-orc8r-bundle","title":"Deploy the magma-orc8r bundle","text":"<p>Create an <code>overlay.yaml</code> file that contains the following content:</p> overlay.yaml<pre><code>applications:\nfluentd:\noptions:\ndomain: &lt;your domain name&gt;\nelasticsearch-url: &lt;your elasticsearch https url&gt;\norc8r-certifier:\noptions:\ndomain: &lt;your domain name&gt;\norc8r-eventd:\noptions:\nelasticsearch-url: &lt;your elasticsearch http url&gt;\norc8r-nginx:\noptions:\ndomain: &lt;your domain name&gt;\ntls-certificates-operator:\noptions:\ngenerate-self-signed-certificates: true\nca-common-name: rootca.&lt;your domain name&gt;\n</code></pre> <p>Warning</p> <p>This configuration is unsecure because it uses self-signed certificates.</p> <p>Info</p> <p>Elasticsearch is not part of the magma-orc8r bundle and needs to be deployed separately. For details regarding Elasticsearch integration please visit Integrate Charmed Magma Orchestrator to Elasticsearch</p> <p>Deploy Orchestrator:</p> <pre><code>juju deploy magma-orc8r --overlay overlay.yaml --trust --channel=beta\n</code></pre> <p>The deployment is completed when all services are in the <code>Active-Idle</code> state.</p>"},{"location":"how-to/deploy_charmed_magma_orchestrator/#setup-dns","title":"Setup DNS","text":"<p>Retrieve the services that need to be exposed:</p> <pre><code>juju run-action orc8r-orchestrator/leader get-load-balancer-services --wait\n</code></pre> <p>In your domain registrar, create DNS records for the following Kubernetes services:</p> Address Hostname <code>&lt;orc8r-bootstrap-nginx External IP&gt;</code> <code>bootstrapper-controller.&lt;your domain&gt;</code> <code>&lt;orc8r-nginx-proxy External IP&gt;</code> <code>api.&lt;your domain&gt;</code> <code>&lt;orc8r-clientcert-nginx External IP&gt;</code> <code>controller.&lt;your domain&gt;</code> <code>&lt;nginx-proxy External IP&gt;</code> <code>*.nms.&lt;your domain&gt;</code> <code>&lt;fluentd External IP&gt;</code> <code>fluentd.&lt;your domain&gt;</code>"},{"location":"how-to/deploy_charmed_magma_orchestrator/#verify-the-deployment","title":"Verify the deployment","text":"<p>Get the master organization's username and password:</p> <pre><code>juju run-action nms-magmalte/leader get-master-admin-credentials --wait\n</code></pre> <p>Confirm successful deployment by visiting <code>https://master.nms.&lt;your domain&gt;</code> and logging in with the <code>admin-username</code> and <code>admin-password</code> outputted here.</p>"},{"location":"how-to/import_the_orchestrator_admin_operator_certificate/","title":"Import the Orchestrator admin operator certificate","text":"<p>The Orchestrator admin operator certificate is needed to make API calls to Orchestrator and to use its swagger documentation. Use this how-to guide to retrieve the certificate and load it in your browser.</p> <p>First, retrieve the PFX package that contains the certificates to authenticate against Magma Orchestrator:</p> <pre><code>juju scp --container=\"magma-orc8r-certifier\" orc8r-certifier/0:/var/opt/magma/certs/admin_operator.pfx admin_operator.pfx\n</code></pre> <p>Then, retrieve the PFX package password:</p> <pre><code>juju run orc8r-certifier/leader get-pfx-package-password\n</code></pre> <p>Info</p> <p>The pfx package was copied to your current working directory. It can now be loaded in your browser or used to make API calls to Magma orchestrator.</p>"},{"location":"how-to/integrate_charmed_magma_access_gateway_to_orchestrator/","title":"Integrate Charmed Magma Access Gateway with Orchestrator","text":""},{"location":"how-to/integrate_charmed_magma_access_gateway_to_orchestrator/#relate-the-access-gateway-with-the-orchestrator","title":"Relate the Access Gateway with the Orchestrator","text":"<p>Offer the orchestrator relation outside the orchestrator model:</p> <pre><code>juju offer orc8r-nginx:orchestrator\n</code></pre> <p>Configure the Access Gateway to connect to the Orchestrator:</p> <pre><code>juju relate magma-access-gateway-operator [[&lt;controller&gt;:]&lt;user&gt;/]&lt;model-name&gt;.orc8r-nginx\n</code></pre> <p>Fetch the Access Gateway's <code>Hardware ID</code> and <code>Challenge Key</code>:</p> <pre><code>juju run-action magma-access-gateway-operator/&lt;unit number&gt; get-access-gateway-secrets --wait\n</code></pre> <p>Navigate to \"Equipment\" on the NMS via the left navigation bar, hit \"Add Gateway\" on the upper right, and fill out the multi-step modal form. Use the secrets from above for the \"Hardware UUID\" and \"Challenge Key\" fields.</p>"},{"location":"how-to/integrate_charmed_magma_access_gateway_to_orchestrator/#verify-the-deployment","title":"Verify the deployment","text":"<p>Run the following command:</p> <pre><code>juju run-action magma-access-gateway-operator/&lt;unit number&gt; post-install-checks --wait\n</code></pre> <p>Info</p> <p>Successful Access Gateway deployment will be indicated by the <code>Magma AGW post-installation checks finished successfully.</code> message.</p>"},{"location":"how-to/integrate_charmed_magma_access_gateway_to_srsRAN/","title":"Integrate Charmed Magma Access Gateway to an srsRAN eNodeB","text":"<p>To relate Access Gateway to the srsRAN operator:</p> <pre><code>juju relate magma-access-gateway-operator &lt;srsRAN application name&gt;\n</code></pre>"},{"location":"how-to/integrate_charmed_magma_orchestrator_to_elasticsearch/","title":"Integrate Charmed Magma Orchestrator to Elasticsearch","text":""},{"location":"how-to/integrate_charmed_magma_orchestrator_to_elasticsearch/#requirements","title":"Requirements","text":"<ul> <li>Elasticsearch instance supporting both <code>HTTP</code> and <code>HTTPS</code> requests</li> <li>Connectivity between the Orchestrator and the Elasticsearch</li> </ul>"},{"location":"how-to/integrate_charmed_magma_orchestrator_to_elasticsearch/#integration","title":"Integration","text":"Option 1: Integration upon deploymentOption 2: Integration to a running Orchestrator instance <p>Create an <code>overlay.yaml</code> file that contains the following content:</p> overlay.yaml<pre><code>applications:\nfluentd:\noptions:\ndomain: &lt;your domain name&gt;\nelasticsearch-url: &lt;your elasticsearch https url&gt;\norc8r-certifier:\noptions:\ndomain: &lt;your domain name&gt;\norc8r-eventd:\noptions:\nelasticsearch-url: &lt;your elasticsearch http url&gt;\norc8r-nginx:\noptions:\ndomain: &lt;your domain name&gt;\ntls-certificates-operator:\noptions:\ngenerate-self-signed-certificates: true\nca-common-name: rootca.&lt;your domain name&gt;\n</code></pre> <p>Deploy <code>Charmed Magma Orchestrator</code> as described in Deploy Charmed Magma Orchestrator</p> <p>Configure <code>elasticsearch-url</code> in the <code>fluentd</code> charm:</p> <pre><code>juju config fluentd elasticsearch-url=&lt;your elasticsearch https url&gt;\n</code></pre> <p>Configure <code>elasticsearch-url</code> in the <code>orc8r-eventd</code> charm:</p> <pre><code>juju config orc8r-eventd elasticsearch-url=&lt;your elasticsearch http url&gt;\n</code></pre> <p>Confirm changes by visiting <code>https://&lt;your org name&gt;.nms.&lt;your domain&gt;</code> and checking the <code>Events</code> chart of your network's dashboard.</p>"},{"location":"tutorial/01_getting_started/","title":"1. Getting Started","text":"<p>We will start by login in with AWS, creating resources that will be needed throughout the tutorial and bootstrapping a Juju controller.</p>"},{"location":"tutorial/01_getting_started/#login-to-aws","title":"Login to AWS","text":"<p>Login to AWS using the AWS CLI:</p> <pre><code>aws configure\n</code></pre> <p>You will be asked to provide your AWS credentials and the region. The rest of this tutorial assumes that the region is <code>us-east-2</code>.</p>"},{"location":"tutorial/01_getting_started/#create-aws-resources","title":"Create AWS resources","text":""},{"location":"tutorial/01_getting_started/#create-a-security-group","title":"Create a security group","text":"<p>Create a security group in your default AWS VPC:</p> <pre><code>aws ec2 create-security-group --group-name \"magma\" --description \"Allow All\" --vpc-id &lt;your VPC ID&gt;\n</code></pre> <p>Note the <code>GroupId</code> and use it to add a wildcard rule:</p> <pre><code>aws ec2 authorize-security-group-ingress --group-id &lt;security group ID&gt; --protocol -1 --port -1 --cidr 0.0.0.0/0\n</code></pre>"},{"location":"tutorial/01_getting_started/#create-a-subnet","title":"Create a subnet","text":"<p>Create a subnet called S1:</p> <pre><code>aws ec2 create-subnet --vpc-id &lt;your VPC ID&gt; --cidr-block 172.31.126.0/28 --availability-zone us-east-2a --tag-specifications 'ResourceType=subnet,Tags=[{Key=Name,Value=s1}]'\n</code></pre> <p>Make sure to use a <code>cidr-block</code> that fits into your default VPC's block.</p>"},{"location":"tutorial/01_getting_started/#bootstrap-a-juju-controller-on-aws","title":"Bootstrap a Juju controller on AWS","text":"<p>Bootstrap a Juju controller on AWS:</p> <pre><code>juju bootstrap --config vpc-id=&lt;your VPC ID&gt; aws/us-east-2\n</code></pre>"},{"location":"tutorial/02_deploying_magma_orchestrator/","title":"2. Deploying Magma Orchestrator","text":"<p>In this section, we will deploy Magma Orchestrator on AWS's managed Kubernetes service (EKS) using Juju.</p> <p>Note</p> <p> The following steps assume that you have a domain name registered with a DNS provider and that you have a hosted zone in AWS's Route53 associated with this domain. Everywhere you see <code>&lt;your domain name&gt;</code> in the following steps, you should replace it with your domain name.</p>"},{"location":"tutorial/02_deploying_magma_orchestrator/#create-a-kubernetes-cluster","title":"Create a Kubernetes cluster","text":""},{"location":"tutorial/02_deploying_magma_orchestrator/#create-the-kubernetes-cluster","title":"Create the Kubernetes cluster","text":"<p>Create a Kubernetes cluster on AWS using <code>eksctl</code>:</p> <pre><code>eksctl create cluster --name magma-orc8r --region us-east-2 --node-type t2.xlarge --with-oidc\n</code></pre> <p>This step will take a couple of minutes. You can check that the cluster is running by running <code>kubectl get nodes</code>.</p>"},{"location":"tutorial/02_deploying_magma_orchestrator/#add-the-ebs-csi-addon-to-the-kubernetes-cluster","title":"Add the EBS CSI addon to the Kubernetes cluster","text":"<p>Create an IAM service account:</p> <pre><code>eksctl create iamserviceaccount \\\n  --name ebs-csi-controller-sa \\\n  --namespace kube-system \\\n  --cluster magma-orc8r \\\n  --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy \\\n  --approve \\\n  --role-only \\\n  --role-name AmazonEKS_EBS_CSI_DriverRole\n</code></pre> <p>Add the <code>aws-ebs-csi-driver</code> addon to the Kubernetes cluster:</p> <pre><code>eksctl create addon --name aws-ebs-csi-driver --cluster magma-orc8r --service-account-role-arn arn:aws:iam::&lt;your IAM user ID&gt;:role/AmazonEKS_EBS_CSI_DriverRole\n</code></pre>"},{"location":"tutorial/02_deploying_magma_orchestrator/#deploy-magma-orchestrator","title":"Deploy Magma Orchestrator","text":"<p>Add the Kubernetes cloud to Juju:</p> <pre><code>juju add-k8s eks-magma-orc8r --client --controller aws-us-east-2\n</code></pre> <p>Create a Juju model:</p> <pre><code>juju add-model orc8r eks-magma-orc8r/us-east-2\n</code></pre> <p>Create a file called <code>overlay.yaml</code> in your current working directory and place the following content in it:</p> overlay.yaml<pre><code>applications:\norc8r-certifier:\noptions:\ndomain: &lt;your domain name&gt;\norc8r-nginx:\noptions:\ndomain: &lt;your domain name&gt;\ntls-certificates-operator:\noptions:\ngenerate-self-signed-certificates: true\nca-common-name: rootca.&lt;your domain name&gt;\n</code></pre> <p>Deploy Magma's Orchestrator with this overlay file:</p> <pre><code>juju deploy magma-orc8r --overlay overlay.yaml --trust\n</code></pre> <p>You can see the deployment's status by running <code>juju status</code>. The deployment is completed when all units are in the <code>Active-Idle</code> state.</p> <pre><code>ubuntu@host:~$ juju status\nModel               Controller                          Cloud/Region                        Version  SLA          Timestamp\nmagma-orchestrator  magma-orchestrator-k8s-localhost  magma-orchestrator-k8s/localhost  2.9.35   unsupported  18:19:48-04:00\n\n[...]\n\nUnit                              Workload  Agent  Address      Ports     Message\nnms-magmalte/0*                   active    idle   10.1.50.73             \nnms-nginx-proxy/0*                active    idle   10.1.50.75             \norc8r-accessd/0*                  active    idle   10.1.50.76             \norc8r-alertmanager-configurer/0*  active    idle   10.1.50.81             \norc8r-alertmanager/0*             active    idle   10.1.50.77             \norc8r-analytics/0*                active    idle   10.1.50.82             \norc8r-bootstrapper/0*             active    idle   10.1.50.84             \norc8r-certifier/0*                active    idle   10.1.50.87             \norc8r-configurator/0*             active    idle   10.1.50.88             \norc8r-ctraced/0*                  active    idle   10.1.50.89             \norc8r-device/0*                   active    idle   10.1.50.90             \norc8r-directoryd/0*               active    idle   10.1.50.91             \norc8r-dispatcher/0*               active    idle   10.1.50.92             \norc8r-eventd/0*                   active    idle   10.1.50.94             \norc8r-ha/0*                       active    idle   10.1.50.95             \norc8r-lte/0*                      active    idle   10.1.50.97             \norc8r-metricsd/0*                 active    idle   10.1.50.99             \norc8r-nginx/0*                    active    idle   10.1.50.102            \norc8r-obsidian/0*                 active    idle   10.1.50.103            \norc8r-orchestrator/0*             active    idle   10.1.50.106            \norc8r-policydb/0*                 active    idle   10.1.50.107            \norc8r-prometheus-cache/0*         active    idle   10.1.50.110            \norc8r-prometheus-configurer/0*    active    idle   10.1.50.116            \norc8r-prometheus/0*               active    idle   10.1.50.72             \norc8r-service-registry/0*         active    idle   10.1.50.111            \norc8r-smsd/0*                     active    idle   10.1.50.112            \norc8r-state/0*                    active    idle   10.1.50.115            \norc8r-streamer/0*                 active    idle   10.1.50.117            \norc8r-subscriberdb-cache/0*       active    idle   10.1.50.119            \norc8r-subscriberdb/0*             active    idle   10.1.50.118            \norc8r-tenants/0*                  active    idle   10.1.50.120            \norc8r-user-grafana/0*             active    idle   10.1.50.123            \npostgresql-k8s/0*                 active    idle   10.1.50.126  5432/TCP  Pod configured\ntls-certificates-operator/0*      active    idle   10.1.50.121            \n</code></pre>"},{"location":"tutorial/02_deploying_magma_orchestrator/#configure-route53","title":"Configure Route53","text":"<p>Retrieve the list of load balancer Kubernetes services:</p> <pre><code>juju run-action orc8r-orchestrator/leader get-load-balancer-services --wait\n</code></pre> <p>The result should look like so:</p> <pre><code>ubuntu@host:~$ juju run-action orc8r-orchestrator/leader get-load-balancer-services --wait\nunit-orc8r-orchestrator-0:\n  UnitId: orc8r-orchestrator/0\n  id: \"2\"\n  results:\n    fluentd: a13611fd67ae84df5bd40c4c7fe892d5-1909378219.us-east-2.elb.amazonaws.com\n    nginx-proxy: a7b65619cbf8443feb05910823b6c42b-748407990.us-east-2.elb.amazonaws.com\n    orc8r-bootstrap-nginx: ab4feaf807c9440b8b021395f0422b26-1385734990.us-east-2.elb.amazonaws.com\n    orc8r-clientcert-nginx: ac63855b699064f5b825e707cfe290f0-1144570992.us-east-2.elb.amazonaws.com\n    orc8r-nginx-proxy: a6ae77105db624f06bb37f18843db925-911888461.us-east-2.elb.amazonaws.com\n  status: completed\n  timing:\n    completed: 2023-03-08 19:26:46 +0000 UTC\n    enqueued: 2023-03-08 19:26:44 +0000 UTC\n    started: 2023-03-08 19:26:45 +0000 UTC\n</code></pre> <p>The hostnames associated to each service will differ from those shown here.</p> <p>Note</p> <p>We will need to create CNAME DNS entries using the following mapping:</p> Kubernetes LoadBalancer Service CNAME Entry <code>&lt;orc8r-bootstrap-nginx FQDN&gt;</code> <code>bootstrapper-controller.&lt;your domain name&gt;</code> <code>&lt;orc8r-nginx-proxy FQDN&gt;</code> <code>api.&lt;your domain name&gt;</code> <code>&lt;orc8r-clientcert-nginx FQDN&gt;</code> <code>controller.&lt;your domain name&gt;</code> <code>&lt;nginx-proxy FQDN&gt;</code> <code>*.nms.&lt;your domain name&gt;</code> <p>Create a file named <code>dns.json</code> with the following content:</p> dns.json<pre><code>{\n\"Comment\": \"CREATE CNAME records\",\n\"Changes\": [\n{\n\"Action\": \"CREATE\",\n\"ResourceRecordSet\": {\n\"Name\": \"bootstrapper-controller.&lt;your domain name&gt;\",\n\"Type\": \"CNAME\",\n\"TTL\": 300,\n\"ResourceRecords\": [\n{\n\"Value\": \"ab4feaf807c9440b8b021395f0422b26-1385734990.us-east-2.elb.amazonaws.com\"\n}\n]\n}\n},\n{\n\"Action\": \"CREATE\",\n\"ResourceRecordSet\": {\n\"Name\": \"api.&lt;your domain name&gt;\",\n\"Type\": \"CNAME\",\n\"TTL\": 300,\n\"ResourceRecords\": [\n{\n\"Value\": \"a6ae77105db624f06bb37f18843db925-911888461.us-east-2.elb.amazonaws.com\"\n}\n]\n}\n},\n{\n\"Action\": \"CREATE\",\n\"ResourceRecordSet\": {\n\"Name\": \"controller.&lt;your domain name&gt;\",\n\"Type\": \"CNAME\",\n\"TTL\": 300,\n\"ResourceRecords\": [\n{\n\"Value\": \"ac63855b699064f5b825e707cfe290f0-1144570992.us-east-2.elb.amazonaws.com\"\n}\n]\n}\n},\n{\n\"Action\": \"CREATE\",\n\"ResourceRecordSet\": {\n\"Name\": \"*.nms.&lt;your domain name&gt;\",\n\"Type\": \"CNAME\",\n\"TTL\": 300,\n\"ResourceRecords\": [\n{\n\"Value\": \"a7b65619cbf8443feb05910823b6c42b-748407990.us-east-2.elb.amazonaws.com\"\n}\n]\n}\n}\n]\n}\n</code></pre> <p>Each highlighted line needs to be modified using the mapping presented in the note above.</p> <p>Create the CNAME records in Route53:</p> <pre><code>aws route53 change-resource-record-sets --hosted-zone-id &lt;your hosted zone ID&gt; --change-batch file://dns.json\n</code></pre> <p>Now, navigate to <code>https://master.nms.&lt;your domain name&gt;</code>, you should receive a warning because we are using self-signed-certificates, click on \"Proceed\".</p>"},{"location":"tutorial/02_deploying_magma_orchestrator/#login-to-magmas-network-management-system","title":"Login to Magma's Network Management System","text":"<p>Get the master organization's username and password:</p> <pre><code>juju run-action nms-magmalte/leader get-master-admin-credentials --wait\n</code></pre> <p>Note the <code>admin-username</code> and <code>admin-password</code> values.</p> <p>Confirm successful deployment by visiting <code>https://master.nms.&lt;your domain name&gt;</code> and logging in with the <code>admin-username</code> and <code>admin-password</code> outputted here.</p> <p></p>"},{"location":"tutorial/03_deploying_magma_access_gateway/","title":"3. Deploying Magma Access Gateway","text":""},{"location":"tutorial/03_deploying_magma_access_gateway/#create-an-ec2-instance-on-aws","title":"Create an EC2 instance on AWS","text":""},{"location":"tutorial/03_deploying_magma_access_gateway/#create-the-ec2-instance","title":"Create the EC2 instance","text":"<p>Create an AWS EC2 instance running Ubuntu 20.04:</p> <pre><code>aws ec2 run-instances \\\n  --security-group-ids &lt;your security group ID&gt; \\\n  --image-id ami-0568936c8d2b91c4e \\\n  --count 1 \\\n  --instance-type t2.xlarge \\\n  --key-name &lt;your ssh key name&gt; \\\n  --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=magma-access-gateway}]' \\\n  --block-device-mapping \"[ { \\\"DeviceName\\\": \\\"/dev/sda1\\\", \\\"Ebs\\\": { \\\"VolumeSize\\\": 50 } } ]\"\n</code></pre> <p>Replace <code>&lt;your security group ID&gt;</code> and <code>&lt;your ssh key name&gt;</code> with the appropriate values.</p> <p>Note the <code>InstanceId</code> of the created instance and use it to retrieve its public IP address:</p> <pre><code>aws ec2 describe-instances --filters \"Name=instance-id,Values=&lt;your instance ID&gt;\" --query 'Reservations[*].Instances[*].[PublicIpAddress]' --output text\n</code></pre> <p>Note this address, you will need it very soon.</p>"},{"location":"tutorial/03_deploying_magma_access_gateway/#attach-a-secondary-network-interface-to-the-instance","title":"Attach a secondary network interface to the instance","text":"<p>Note the <code>SubnetId</code> and create a network interface on this subnet:</p> <pre><code>aws ec2 create-network-interface --subnet-id &lt;your subnet ID&gt; --group &lt;your security group&gt;\n</code></pre> <p>Note the <code>NetworkInterfaceId</code> and use it to attach the network interface to the EC2 instance:</p> <pre><code>aws ec2 attach-network-interface --network-interface-id &lt;your network interface ID&gt; --instance-id &lt;your instance ID&gt; --device-index 1\n</code></pre>"},{"location":"tutorial/03_deploying_magma_access_gateway/#downgrade-the-kernel-on-the-instance","title":"Downgrade the Kernel on the instance","text":"<p>Unfortunately, the default kernel on the AWS Ubuntu 20.04 AMI image is too new for Magma Access Gateway to work properly. We need to downgrade it to the LTS version <code>5.4.0</code>. SSH into the AWS instance using its public IP and follow the instructions in this blog post. In the end, the <code>GRUB_DEFAULT</code> entry in the GRUB menu should look like <code>'Advanced options for Ubuntu&gt;Ubuntu, with Linux 5.4.0-1097-aws'</code>.</p>"},{"location":"tutorial/03_deploying_magma_access_gateway/#deploy-magma-access-gateway","title":"Deploy Magma Access Gateway","text":"<p>Create a new Juju model for machines:</p> <pre><code>juju add-model edge aws/us-east-2\n</code></pre> <p>Wait for the instance to boot up and be accessible via SSH, then add it as a Juju machine:</p> <pre><code>juju add-machine --private-key=&lt;path to your private key&gt; ssh:ubuntu@&lt;EC2 instance IP address&gt;\n</code></pre> <p>Note the Juju machine ID and deploy Magma Access Gateway to it:</p> <pre><code>juju deploy magma-access-gateway-operator --config sgi=eth0 --config s1=eth1 --to &lt;Machine ID&gt;\n</code></pre> <p>You can see the deployment's status by running <code>juju status</code>. The deployment is completed when the application is in the <code>Active-Idle</code> state. </p> <pre><code>ubuntu@host:~$ juju status\nModel  Controller     Cloud/Region   Version  SLA          Timestamp\nedge   aws-us-east-2  aws/us-east-2  2.9.42   unsupported  11:41:52Z\n\nApp                            Version  Status  Scale  Charm                          Channel  Rev  Exposed  Message\nmagma-access-gateway-operator           active      1  magma-access-gateway-operator  stable    29  no       \n\nUnit                              Workload  Agent  Machine  Public address  Ports  Message\nmagma-access-gateway-operator/0*  active    idle   0        18.188.161.66          \n\nMachine  State    Address        Inst id               Series  AZ  Message\n0        started  18.188.161.66  manual:18.188.161.66  focal       Manually provisioned machine\n</code></pre>"},{"location":"tutorial/04_integrating_magma_access_gateway_with_magma_orchestrator/","title":"4. Integrating Magma Access Gateway with Magma Orchestrator","text":""},{"location":"tutorial/04_integrating_magma_access_gateway_with_magma_orchestrator/#integrate-magma-access-gateway-with-magma-orchestrator","title":"Integrate Magma Access Gateway with Magma Orchestrator","text":"<p>Offer an application endpoint from Orchestrator:</p> <pre><code>juju offer orc8r.orc8r-nginx:orchestrator\njuju consume orc8r.orc8r-nginx\n</code></pre> <p>Relate Magma Access Gateway with Orchestrator:</p> <pre><code>juju relate orc8r-nginx:orchestrator magma-access-gateway-operator\n</code></pre> <p>Wait for the application to go back to <code>Active-Idle</code>:</p> <pre><code>ubuntu@host:~$ juju status\nModel  Controller     Cloud/Region   Version  SLA          Timestamp\nedge   aws-us-east-2  aws/us-east-2  2.9.42   unsupported  16:09:01-05:00\n\nApp                            Version  Status  Scale  Charm                          Channel  Rev  Exposed  Message\nmagma-access-gateway-operator           active      1  magma-access-gateway-operator  stable    29  no       \n\nUnit                              Workload  Agent  Machine  Public address  Ports  Message\nmagma-access-gateway-operator/0*  active    idle   0        18.189.227.182         \n\nMachine  State    Address         Inst id                Series  AZ  Message\n0        started  18.189.227.182  manual:18.189.227.182  focal       Manually provisioned machine\n</code></pre> <p>Fetch the Access Gateway's <code>Hardware ID</code> and <code>Challenge Key</code> and note those values:</p> <pre><code>juju run-action magma-access-gateway-operator/0 get-access-gateway-secrets --wait\n</code></pre> <p>The output should look like:</p> <pre><code>ubuntu@host:~$ juju run-action magma-access-gateway-operator/0 get-access-gateway-secrets --wait\nunit-magma-access-gateway-operator-0:\n  UnitId: magma-access-gateway-operator/0\n  id: \"22\"\n  results:\n    challenge-key: MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAE4bFCLDcHSi0fmESrejkTdJlBk/Mi/z/30VoV3dYTwWmOo1+xBjUjnMMBpWWlUbmdyOaSk32xg4/Pa9gq6gBj37INrB2zbgBfi5kdHbyFzbuIjak919/m5739tIb3NCYR\n    hardware-id: 26236e99-f06d-4686-a888-696c7f2910c9\n  status: completed\n  timing:\n    completed: 2023-03-17 11:47:24 +0000 UTC\n    enqueued: 2023-03-17 11:47:20 +0000 UTC\n    started: 2023-03-17 11:47:23 +0000 UTC\n</code></pre>"},{"location":"tutorial/04_integrating_magma_access_gateway_with_magma_orchestrator/#create-a-network-in-magma-orchestrator","title":"Create a network in Magma Orchestrator","text":""},{"location":"tutorial/04_integrating_magma_access_gateway_with_magma_orchestrator/#create-a-user-in-the-magma-test-organization","title":"Create a user in the <code>magma-test</code> organization:","text":"<ol> <li>Login to the <code>master</code> Orchestrator organization at this address: <code>https://master.nms.&lt;your domain&gt;</code>.</li> <li>Click on the  icon next to the <code>magma-test</code> organization</li> <li>Add a user with the following attributes:<ul> <li>email: <code>admin@juju.com</code></li> <li>password: <code>password123</code></li> <li>role: <code>Super User</code></li> </ul> </li> </ol>"},{"location":"tutorial/04_integrating_magma_access_gateway_with_magma_orchestrator/#create-a-network-in-the-magma-test-organization","title":"Create a network in the <code>magma-test</code> organization:","text":"<ol> <li>Login to the <code>magma-test</code> organization at this address: <code>https://magma-test.nms.&lt;your domain&gt;</code>. Use the credentials from the previous step.</li> <li>On the left pane, click on \"Networks\"</li> <li>Click on \"Add Network\"</li> <li>Fill in the following values:<ul> <li>Network ID: <code>my-network</code></li> <li>Network Name: <code>my-network</code></li> <li>Description: <code>my-network</code></li> <li>Network Type: <code>lte</code></li> </ul> </li> <li>Refresh the page. You should now see your network dashboard</li> </ol>"},{"location":"tutorial/04_integrating_magma_access_gateway_with_magma_orchestrator/#change-the-network-configuration","title":"Change the Network configuration","text":"<ol> <li>Click on the \"Networks\" tab on the left pane</li> <li>Next to the \"EPC\" box, click on \"Edit\"</li> <li>Change the following values:<ul> <li>MCC: <code>001</code></li> <li>MNC: <code>01</code></li> <li>TAC: <code>7</code></li> </ul> </li> <li>Click on \"Save\"</li> </ol>"},{"location":"tutorial/04_integrating_magma_access_gateway_with_magma_orchestrator/#add-the-access-gateway-to-the-network","title":"Add the Access Gateway to the network","text":"<ol> <li>Navigate to \"Equipment\" via the left pane</li> <li>Click on \"Add New\"</li> <li>Fill in the following values:<ul> <li>Gateway Name: <code>my-gateway</code></li> <li>Gateway ID: <code>my-gateway</code></li> <li>Hardware UUID: <code>&lt;Access Gateway Hardware ID&gt;</code></li> <li>Gateway Description: <code>my-gateway</code></li> <li>Challenge Key: <code>&lt;Access Gateway Challenge Key&gt;</code></li> </ul> </li> <li>Click on \"Save and Continue\". You should ignore the next tabs and continue clicking on \"Save and Continue\".</li> <li>Click on \"my-gateway\"</li> <li>You should see your gateway's health go to \"Good\" after a few minutes</li> </ol>"},{"location":"tutorial/05_deploying_the_radio_simulator/","title":"5. Deploying the radio simulator","text":""},{"location":"tutorial/05_deploying_the_radio_simulator/#create-an-instance-on-aws","title":"Create an instance on AWS","text":"<p>Create an AWS EC2 instance running Ubuntu 20.04:</p> <pre><code>aws ec2 run-instances \\\n  --security-group-ids &lt;your security group&gt; \\\n  --image-id ami-0568936c8d2b91c4e \\\n  --count 1 \\\n  --instance-type t2.xlarge \\\n  --key-name &lt;your ssh key name&gt; \\\n  --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=srsran}]' \\\n  --block-device-mapping \"[ { \\\"DeviceName\\\": \\\"/dev/sda1\\\", \\\"Ebs\\\": { \\\"VolumeSize\\\": 50 } } ]\"\n</code></pre> <p>Replace the security group ID with one that allows SSH access and note the instance ID.</p>"},{"location":"tutorial/05_deploying_the_radio_simulator/#attach-a-secondary-network-interface-to-the-instance","title":"Attach a secondary network interface to the instance","text":"<p>Using the same S1 subnet that was created during step 3, create a new network interface:</p> <pre><code>aws ec2 create-network-interface --subnet-id &lt;your subnet ID&gt; --group &lt;your security group&gt;\n</code></pre> <p>Attach the network interface to the EC2 instance:</p> <pre><code>aws ec2 attach-network-interface --network-interface-id &lt;your network interface ID&gt; --instance-id &lt;your instance ID&gt; --device-index 1\n</code></pre>"},{"location":"tutorial/05_deploying_the_radio_simulator/#add-the-machine-to-juju","title":"Add the machine to Juju","text":"<p>Wait for the instance to boot up and be accessible via SSH, then add it as a Juju machine:</p> <pre><code>juju add-machine --private-key=&lt;path to your private key&gt; ssh:ubuntu@&lt;EC2 instance IP address&gt;\n</code></pre>"},{"location":"tutorial/05_deploying_the_radio_simulator/#configure-netplan-to-use-the-secondary-network-interface","title":"Configure Netplan to use the secondary network interface","text":"<p>SSH into the machine:</p> <pre><code>juju ssh &lt;Your instance ID&gt;\n</code></pre> <p>Retrieve the mac address used by <code>eth1</code>: <pre><code>ip a show eth1\n</code></pre></p> <p>Create a file named <code>99-srsran.yaml</code> that contains the following content and move it over to <code>/etc/netplan/</code>:</p> 99-srsran.yaml<pre><code>network:\nversion: 2\nethernets:\neth1:\ndhcp4: true\ndhcp6: false\nmatch:\nmacaddress: &lt;eth1 interface mac address&gt;\nset-name: eth1\n</code></pre> <p>Apply the netplan configuration:</p> <pre><code>netplan apply\n</code></pre>"},{"location":"tutorial/05_deploying_the_radio_simulator/#deploy-the-srsran-radio-simulator","title":"Deploy the srsRAN radio simulator","text":"<p>Deploy srsRAN to the machine:</p> <pre><code>juju deploy srs-enb-ue --channel=edge --config bind-interface=\"eth1\" --to &lt;Machine ID&gt;\n</code></pre>"},{"location":"tutorial/05_deploying_the_radio_simulator/#integrate-the-radio-simulator-with-magma-access-gateway","title":"Integrate the radio simulator with Magma Access Gateway","text":"<pre><code>juju relate srs-enb-ue:lte-core magma-access-gateway-operator:lte-core\n</code></pre>"},{"location":"tutorial/06_simulating_user_traffic/","title":"6. Simulating user traffic","text":""},{"location":"tutorial/06_simulating_user_traffic/#create-an-apn-in-magma-orchestrator","title":"Create an APN in Magma Orchestrator","text":"<p>Create an Access Point Name (APN) in Magma Orchestrator:</p> <ol> <li>Login to <code>https://magma-test.&lt;your domain&gt;</code></li> <li>Click on \"Traffic\" on the left panel</li> <li>Click on \"APNs\"</li> <li>Click on \"Create New APN\"</li> <li>Fill in the following values:<ul> <li>APN ID: <code>default</code></li> <li>Class ID: <code>9</code></li> <li>ARP Priority Level: <code>15</code></li> <li>Max Required Bandwidth<ul> <li>Upload: <code>1000000</code></li> <li>Download: <code>1000000</code></li> </ul> </li> </ul> </li> <li>ARP Pre-emption-Capability: <code>Disabled</code></li> <li>ARP Pre-emption-Vulnerability: <code>Disabled</code></li> <li>Click on \"Save\"</li> </ol>"},{"location":"tutorial/06_simulating_user_traffic/#add-a-network-subscriber","title":"Add a network subscriber","text":"<p>Add a subscriber to the network in Magma Orchestrator:</p> <ol> <li>Login to <code>https://magma-test.&lt;your domain&gt;</code></li> <li>Click on \"Subscriber\" on the left panel</li> <li>Click on \"Add Subscriber\"</li> <li>Click on \"Add\"</li> <li>Fill in the following values:<ul> <li>Subscriber Name: <code>IMSI001010000000001</code></li> <li>IMSI: <code>IMSI001010000000001</code></li> <li>Auth Key: <code>00112233445566778899aabbccddeeff</code></li> <li>Auth OPC: <code>63BFA50EE6523365FF14C1F45F88737D</code></li> <li>Service: <code>ACTIVE</code></li> <li>Data Plan: <code>default</code></li> <li>Active APNs: <code>default</code></li> </ul> </li> <li>Click on \"Save\"</li> <li>Click on \"Save and Add Subscribers\"</li> </ol>"},{"location":"tutorial/06_simulating_user_traffic/#attach-a-user-equipment-to-the-network","title":"Attach a User Equipment to the Network","text":"<p>Attach a User Equipment (UE) to the Network:</p> <pre><code>juju run-action srs-enb-ue/0 attach-ue --string-args usim-imsi=001010000000001 usim-k=00112233445566778899aabbccddeeff usim-opc=63BFA50EE6523365FF14C1F45F88737D --wait\n</code></pre>"},{"location":"tutorial/06_simulating_user_traffic/#run-the-simulation","title":"Run the simulation","text":"<p>SSH to the machine where srsRAN is running:</p> <pre><code>juju ssh &lt;your srsRAN machine ID&gt;\n</code></pre> <p>Use the UE's interface to ping something on the internet, here you should expect no packet loss.</p> <pre><code>ping -I tun_srsue google.com\n</code></pre> <p>Success</p> <p>You have a fully functioning 4G Network </p>"},{"location":"tutorial/07_destroying_the_environment/","title":"7. Destroying the environment","text":"<p>Destroy the Juju controller:</p> <pre><code>juju kill-controller -y aws-us-east-2\n</code></pre> <p>Destroy the AWS resources:</p> <pre><code>eksctl delete cluster --name magma-orc8r\naws ec2 terminate-instances --instance-ids &lt;Magma Access Gateway instance ID&gt; &lt;srsRAN instance ID&gt;\naws ec2 delete-network-interface --network-interface-id &lt;Magma Access Gateway network interface ID&gt;\naws ec2 delete-network-interface --network-interface-id &lt;srsRAN network interface ID&gt;\naws ec2 delete-subnet --subnet-id &lt;S1 subnet ID&gt;\naws ec2 delete-security-group --group-id &lt;your security group ID&gt;\n</code></pre>"},{"location":"tutorial/overview/","title":"Operate your own private mobile network with Magma","text":"<p>In this tutorial, we will use Juju to deploy and run Magma's 4G core network on AWS. We will also deploy a radio and cellphone simulator from the srsRAN project to simulate usage of this network.  You will need:</p> <ul> <li> An AWS account1</li> <li> A public domain</li> <li> A computer2 with the following software installed:<ul> <li>juju 2.9</li> <li>kubectl</li> <li>aws cli</li> <li>eksctl</li> </ul> </li> </ul>"},{"location":"tutorial/overview/#table-of-contents","title":"Table of contents","text":"<ol> <li>Getting Started</li> <li>Deploying Magma Orchestrator</li> <li>Deploying Magma Access Gateway</li> <li>Integrating Magma Access Gateway with Magma Orchestrator</li> <li>Deploying the radio simulator</li> <li>Simulating user traffic</li> <li>Destroying the environment</li> </ol> <ol> <li> <p>This tutorial uses AWS as the cloud provider. You can use any cloud provider that Juju supports. See Juju Clouds for more information.\u00a0\u21a9</p> </li> <li> <p>All the commands were tested from a Ubuntu 22.04 LTS machine.\u00a0\u21a9</p> </li> </ol>"},{"location":"tutorial/reference/","title":"Reference","text":""},{"location":"tutorial/reference/#aws-services","title":"AWS services","text":""}]}